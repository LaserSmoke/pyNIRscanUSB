# -*- coding: utf-8 -*-
"""
Created on Wed May  3 09:25:32 2017

@author: jstafford
"""

import hid
import struct

import time

class Battery:
    def __init__(self):
        ReportIDByte = int(0x00)
        WriteFlagByte = int(0xC0)
        SeqByte = int(0x00)
        LengthByteLSB = int(0x02)  # this is defined as short in code so not sure of byte order
        LengthByteMSB = int(0x00)
        CmdByte1 = int(0x0A)
        CmdByte2 = int(0x03)
        self.msg = [ReportIDByte, WriteFlagByte, SeqByte, LengthByteLSB, LengthByteMSB, CmdByte1, CmdByte2]


        # pad to 65bytes , one record id byte, 64 record bytes
        # for i in range(len(self.msg),65):
        # self.msg.append(int(0x00))


# Vendor ID and Product ID for TI NIRscan Nano
vendor_id = 0x0451
product_id = 0x4200

# HID set up
device_list = hid.enumerate(vendor_id, product_id)
scanner = hid.device(vendor_id, product_id)
scanner.open(vendor_id, product_id)
scanner.set_nonblocking(1)

# check if I am actually connected device
serial_number = scanner.get_serial_number_string()

nir_bat_voltage = Battery()

#Send command to read battery voltagestruc
msg = nir_bat_voltage.msg
hid_buff = ''.join(map(chr, msg))
test_buff = bytes(msg)

# ack is the number of bytes written
ack = scanner.write(msg)
print('number of bytes written {:d}'.format(ack))

#need to figure out a better way to get response
time.sleep(1)
#read back voltage
res=scanner.read(8)
print res
voltage=float(struct.unpack('<h',struct.pack('B'*2,res[4],res[5]))[0])/100
print "voltage= {} volts".format(voltage)
scanner.close()
